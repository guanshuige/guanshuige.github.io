<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>观水阁</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-18T03:21:53.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>观山老妖</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>编写博客注意事项</title>
    <link href="http://yoursite.com/2016/11/18/README/"/>
    <id>http://yoursite.com/2016/11/18/README/</id>
    <published>2016-11-18T03:21:53.000Z</published>
    <updated>2016-11-18T03:21:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这里具体介绍如何写文章与github结合。"><a href="#这里具体介绍如何写文章与github结合。" class="headerlink" title="这里具体介绍如何写文章与github结合。"></a>这里具体介绍如何写文章与github结合。</h2><ol>
<li>每篇文章务必采用markdown标记语言编写</li>
<li>每篇文章最前面需要加入以下因素：title、categories、tags  </li>
</ol>
<blockquote>
<p><strong>样例</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 文章标题</div><div class="line">categories:</div><div class="line">- ronger </div><div class="line">- git</div><div class="line">- 多帐号</div><div class="line">tags:</div><div class="line">- git</div><div class="line">comments: false</div><div class="line">---</div></pre></td></tr></table></figure></p>
</blockquote>
<ol>
<li>有些文章较长，需要增加“阅读全文”功能：请在文章内合适位置添加以下内容即可体现此功能。++<strong><em><a id="more"></a></em></strong>++. </li>
</ol>
<blockquote>
<p><strong>注意</strong>   </p>
<ol>
<li>为标识作者，categories第一分类需为作者代号  </li>
<li>一般情况下，默认是开放评论的，如确有需要，某篇文章不开放评论可以在上面添加<strong>comments: false</strong>即可。  </li>
<li>需要注意一下文件目录，next主题是以#标题做为目录索引的。 </li>
</ol>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;这里具体介绍如何写文章与github结合。&quot;&gt;&lt;a href=&quot;#这里具体介绍如何写文章与github结合。&quot; class=&quot;headerlink&quot; title=&quot;这里具体介绍如何写文章与github结合。&quot;&gt;&lt;/a&gt;这里具体介绍如何写文章与github结合。&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;每篇文章务必采用markdown标记语言编写&lt;/li&gt;
&lt;li&gt;每篇文章最前面需要加入以下因素：title、categories、tags  &lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;样例&lt;/strong&gt;：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;---&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;title: 文章标题&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;categories:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- ronger &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- git&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- 多帐号&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tags:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- git&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;comments: false&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;---&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;有些文章较长，需要增加“阅读全文”功能：请在文章内合适位置添加以下内容即可体现此功能。++&lt;strong&gt;&lt;em&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于【nmake】的win32asm【makefile】书写规则说明</title>
    <link href="http://yoursite.com/2016/11/13/%E5%9F%BA%E4%BA%8E%E3%80%90nmake%E3%80%91%E7%9A%84win32asm%E3%80%90makefile%E3%80%91%E4%B9%A6%E5%86%99%E8%A7%84%E5%88%99%E8%AF%B4%E6%98%8E/"/>
    <id>http://yoursite.com/2016/11/13/基于【nmake】的win32asm【makefile】书写规则说明/</id>
    <published>2016-11-13T12:36:28.000Z</published>
    <updated>2016-11-13T12:36:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="●注释和换行"><a href="#●注释和换行" class="headerlink" title="●注释和换行"></a>●注释和换行</h1><p>① makefile 文件注释以“#”开头，一直到行尾的字符<br>② 当一行的内容过长的时候，可以用换行符“/”来继续。※在使用换行符的时候在“/” 后面不要再加上其他任何字符，包括注释和空格。因为只有“/”出现在一行的最后的 时候，nmake才把它当成换行符来解释。 </p>
<h1 id="●宏定义（也可称之为变量定义）"><a href="#●宏定义（也可称之为变量定义）" class="headerlink" title="●宏定义（也可称之为变量定义）"></a>●宏定义（也可称之为变量定义）</h1><p>① 宏定义的语法如下：<br>        变量名＝变量内容<br>② 宏的引用<br>在引用宏时只需在变量前加“$”，被引用的变量名要加圆括号，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#定义 </div><div class="line">EXE = Test.exe </div><div class="line">#引用 </div><div class="line">$(EXE)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>③ 用宏定义的好处不言而喻，但最大的好处是是可以直接在命令行中用新的宏定义覆盖：<br>比如在原makefile中有如下宏定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#编译选项 </div><div class="line">ML_FLAG =  /c  /coff </div><div class="line">#在命令行中输入： </div><div class="line">nmake ML_FLAG=&quot; /c  /coff  /F1&quot;</div></pre></td></tr></table></figure></p>
<p>这里有必要解释一下，此处“覆盖”的意思并不是执行本条命令后makefile文件中宏ML_FLAG的值被物理的改变成“ /c  /coff  /F1”，执行本命令后查看makefile文件，发现宏ML_FLAG的值仍为“/c  /coff ”。此处“覆盖”的真正含义是：仅在执行本条命令遇到makefile文件中宏ML_FLAG时，以“ /c  /coff  /F1”来替换执行。<br>④ 不过关于上述③的使用中有两点需要注意：<br>        ■宏名称要区分大小写，ML_FLAG与ml_flag是不一样的，一般习惯用大写<br>        ■定义值中有空格的时候要用双引号引起来（没有空格时可以不用双引号。（makfile中的宏定义不用遵守这种规则））<br>        这使临时使用不同的参数编译文件时可以不必修改makefile </p>
<h1 id="●显示规则"><a href="#●显示规则" class="headerlink" title="●显示规则"></a>●显示规则</h1><p>①　makefile中包含有一些规则，这些规则定义了文件之间的依赖关系和产生命令，一个规则的格式是这样的： </p>
<pre><code> 目标文件：依赖文件；命令 （方法一） 
 或 
 目标文件：依赖文件  (方法二) 
（Tab）命令 
</code></pre><p>  说明：<br>        ■规则可以用这两种方法，用方法二的时候，命令可以从第二行开始，第一行的“；”省略，但是这时命令前面必须有一个“Tab”字符，否则nmake无法区分这究竟是命 　令还是别的定义。<br>        ■在同一个规则中目标文件可以有多个，依赖文件也可以有多个，同时命令也可以由多个命令行组成，当然这时候就必须用第二种方法定义了，否则无法在同一行中写入多   条命令。<br>        ■nmake默认将整个描述文件的第一条规则中的目标文件认为是最终文件，所以我们必须把最终需要生成的文件放在第一条规则定义<br>  （当用户要求nmake去建造一个目标时，make会去找到这个目标的依赖规则，这时规则中定义的命令并不会立刻被执行，而是首先要做一些事情：▲nmake首先去检查依赖文件是否是另一条规则的目标文件，如果是，则先处理这一条规则，依次类推；▲如果不是，nmake再检查各个依赖文件的时间，看这些文件有没有比目标文件更新的，如果没有，nmake会决定不再建造目标文件，并给出提示：‘xxx文件’is up-to-date，如果依赖文件有比目标文件更新的，才执行命令、生成目标文件。一旦放在第一条的目标文件生成，如果还有其它尚未生成的目标文件没有生成的话，nmake并不去理会，这就说明了为什么我们要把我们想要生成的最终目标文件放在第一条的原因。）<br>        ■目标也可以没有依赖文件，而且目标也可以不是一个真正的文件，比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Clean: </div><div class="line">(Tab）del *.obj </div><div class="line">del *.res</div></pre></td></tr></table></figure></p>
<p>  Clean是一个目标，但我们并不是要生成一个clean文件，而是希望在文件调试完毕后用nmake来清除临时文件，当我们键入nmake clean的时候，工作目录下并没有clean   文件，那么nmake就会去执行clean定义中的命令，因为nmake把每一个不存在的目   标当做是一个过时（out-of-date）的目标（需要重新生成），如此一来，就会执行clean   定义中的命令，如此一来，就会删除中间过程中的文件<em>.obj和</em>.res<br>               ■指出了目标文件全名的规则称为显示规则，便有些类别的文件的编译方法可以是雷同的，如从asm文件产生obj文件的命令总是用ml，从rc文件产生res文件的命令总   是用rc ，对于每个文件都写一条规则有些多余，这时候就要用到隐含规则。 </p>
<h1 id="●隐含规则"><a href="#●隐含规则" class="headerlink" title="●隐含规则"></a>●隐含规则</h1><p>①　隐含规则可以为某一类的文件指出建立的命令，它具体定义了如何将带一个特定扩展名的文件转换成具有另一种扩展名的文件，定义的格式是：<br>             .源扩展名.目标扩展名：；命令（方法一）<br>             或<br>             .源扩展名.目标扩展名： （方法二）<br>            （Tab）命令<br>② 隐含规则不能有依赖文件，所以“：”下面没有内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.asm.obj: </div><div class="line">Ml $(ML_FLAG) $&lt; </div><div class="line">.rc.res: </div><div class="line">rc $&lt;</div></pre></td></tr></table></figure></p>
<p>隐含规则中无法指定确定的输入文件名，因为输入文件名是泛指的有相同扩展名的一整类文件，这时候就要用到几个特殊的内定宏来指定文件名：<br>            ▲ $@—–全路径的目标文件。<br>            ▲ $*—–除去扩展名的全路径的目标文件。<br>            ▲ $?—–所有源文件名。<br>            ▲ $&lt;—–源文件名（只能用在隐含规则中）<br>所以上述的rc $&lt;用于x.rc时就是 rc x.rc ,而用于 y.rc 时就是 rc y.rc 了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;●注释和换行&quot;&gt;&lt;a href=&quot;#●注释和换行&quot; class=&quot;headerlink&quot; title=&quot;●注释和换行&quot;&gt;&lt;/a&gt;●注释和换行&lt;/h1&gt;&lt;p&gt;① makefile 文件注释以“#”开头，一直到行尾的字符&lt;br&gt;② 当一行的内容过长的时候，可以用换行符“/”来继续。※在使用换行符的时候在“/” 后面不要再加上其他任何字符，包括注释和空格。因为只有“/”出现在一行的最后的 时候，nmake才把它当成换行符来解释。 &lt;/p&gt;
&lt;h1 id=&quot;●宏定义（也可称之为变量定义）&quot;&gt;&lt;a href=&quot;#●宏定义（也可称之为变量定义）&quot; class=&quot;headerlink&quot; title=&quot;●宏定义（也可称之为变量定义）&quot;&gt;&lt;/a&gt;●宏定义（也可称之为变量定义）&lt;/h1&gt;&lt;p&gt;① 宏定义的语法如下：&lt;br&gt;        变量名＝变量内容&lt;br&gt;② 宏的引用&lt;br&gt;在引用宏时只需在变量前加“$”，被引用的变量名要加圆括号，如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#定义 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;EXE = Test.exe &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#引用 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$(EXE)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Ronger" scheme="http://yoursite.com/categories/Ronger/"/>
    
      <category term="汇编" scheme="http://yoursite.com/categories/Ronger/%E6%B1%87%E7%BC%96/"/>
    
    
      <category term="win32" scheme="http://yoursite.com/tags/win32/"/>
    
      <category term="makefile" scheme="http://yoursite.com/tags/makefile/"/>
    
  </entry>
  
  <entry>
    <title>GIT添加GITHUB多帐号同步</title>
    <link href="http://yoursite.com/2016/11/13/git%E6%B7%BB%E5%8A%A0%E5%A4%9A%E5%B8%90%E5%8F%B7%E5%90%8C%E6%AD%A5/"/>
    <id>http://yoursite.com/2016/11/13/git添加多帐号同步/</id>
    <published>2016-11-13T10:22:03.000Z</published>
    <updated>2016-11-13T10:22:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>电脑里已经有了一个全局的GITHUB帐号,匹配的RSA密钥等</p>
<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>另外的一个项目需要一个新的GITHUB帐号,且多个项目(帐号)之间能够互不影响的PUSH和PULL</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>删除GITHUB帐号的全局配置,改为按项目配置;生成新的RSA密钥并添加至GITHUB;增加’.ssh’下的RSA密钥<strong>config</strong>配置文件和GITHUB++主机别名++配置,且修改新增项目GITHUB主机的配置为别名配置</p>
<a id="more"></a>
<h1 id="具体操作大纲"><a href="#具体操作大纲" class="headerlink" title="具体操作大纲"></a>具体操作大纲</h1><h2 id="取消用户的global配置"><a href="#取消用户的global配置" class="headerlink" title="取消用户的global配置"></a>取消用户的<strong><em>global</em></strong>配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="built_in">cd</span> ~/.ssh <span class="comment">#切换到users\admin\.ssh</span></div><div class="line">git config --global --unset user.name</div><div class="line">git config --global --unset user.email</div></pre></td></tr></table></figure>
<h2 id="设置每个repo自己的user信息"><a href="#设置每个repo自己的user信息" class="headerlink" title="设置每个repo自己的user信息"></a>设置每个repo自己的user信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config user.name <span class="string">"kkaxiao"</span></div><div class="line">git config user.emamil <span class="string">"kkaxiao@gmail.com"</span></div></pre></td></tr></table></figure>
<h2 id="新建GITHUB第二个帐号guanshuige的SSH-KEY"><a href="#新建GITHUB第二个帐号guanshuige的SSH-KEY" class="headerlink" title="新建GITHUB第二个帐号guanshuige的SSH KEY"></a>新建GITHUB第二个帐号guanshuige的SSH KEY</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#切换到.ssh</span></div><div class="line">ssh-keygen -t rsa -C <span class="string">"guanshuige@gmail.com"</span> <span class="_">-f</span> id_rsa_guanshuige </div><div class="line"><span class="comment">#新ssh key命名为id_rsa_guanshuige以区分id_rsa的默认命名</span></div></pre></td></tr></table></figure>
<h2 id="密钥添加到SSH-AGENT当中"><a href="#密钥添加到SSH-AGENT当中" class="headerlink" title="密钥添加到SSH AGENT当中"></a>密钥添加到SSH AGENT当中</h2><blockquote>
<p>因为默认只读取id_rsa,为了让SSH识别新的私钥,需要将其添加到ssh agent中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-add id_rsa_guanshuige</div></pre></td></tr></table></figure></p>
</blockquote>
<p>如果出现Could not open a connection to your authentication agent的错误,就用下面的这个命令:</p>
<ul>
<li>ssh-agent bash<blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssh-agent bash</div><div class="line">ssh-add id_rsa_work</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<h2 id="修改config文件"><a href="#修改config文件" class="headerlink" title="修改config文件"></a>修改config文件</h2><blockquote>
<p>在.ssh目录下找到config文件,如果没有就创建:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ touch config   <span class="comment">#创建config文件</span></div></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#该文件用于配置私钥对应的服务器</span></div><div class="line"><span class="comment">#Default github user(kkaxiao@gmail.com)</span></div><div class="line">Host github.com</div><div class="line">HostName github.com</div><div class="line">User git</div><div class="line">IdentityFile c:/Users/admin/.ssh/id_rsa</div><div class="line"><span class="comment">#second User guanshuige@gmail.com #建立一个GITHUB的别名,新的帐号用这个别名进行clone 和 update</span></div><div class="line">Host github2</div><div class="line">HostName github.com</div><div class="line">User git</div><div class="line">IdentityFile c:/User/admin/.ssh/id_rsa_guanshuige</div></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ssh -T github2</div><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure>
<hr>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ul>
<li>将新的RSA公钥加入到GITHUB帐号后,即可用别名更新提交<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> github2:guanshuige/guanshuige.github.io</div><div class="line">$ git push</div><div class="line">$ git pull</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;电脑里已经有了一个全局的GITHUB帐号,匹配的RSA密钥等&lt;/p&gt;
&lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h1&gt;&lt;p&gt;另外的一个项目需要一个新的GITHUB帐号,且多个项目(帐号)之间能够互不影响的PUSH和PULL&lt;/p&gt;
&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;删除GITHUB帐号的全局配置,改为按项目配置;生成新的RSA密钥并添加至GITHUB;增加’.ssh’下的RSA密钥&lt;strong&gt;config&lt;/strong&gt;配置文件和GITHUB++主机别名++配置,且修改新增项目GITHUB主机的配置为别名配置&lt;/p&gt;
    
    </summary>
    
      <category term="Ronger" scheme="http://yoursite.com/categories/Ronger/"/>
    
      <category term="git" scheme="http://yoursite.com/categories/Ronger/git/"/>
    
      <category term="多帐号" scheme="http://yoursite.com/categories/Ronger/git/%E5%A4%9A%E5%B8%90%E5%8F%B7/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
</feed>
